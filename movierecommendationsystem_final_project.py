# -*- coding: utf-8 -*-
"""MovieRecommendationSystem_final_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bzja3HiNqNgrveb3kUXFsQtvRNH_dKMS

# **Movie Recommendation System**

---
"""

# Import Library
import pandas as pd
import numpy as np

df=pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

df

df.head()

df.info()

df.describe()

df.columns

df.shape

movie_features=df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

movie_features.shape

movie_features

x=movie_features['Movie_Genre']+' ' +movie_features['Movie_Keywords']+' '+movie_features['Movie_Tagline']+' '+movie_features['Movie_Cast']+' '+movie_features['Movie_Director']

x

x.shape

"""**Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectorizer()

x= tfidf.fit_transform(x)

x.shape

print(x)

"""**Get similarity score using cosing similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score=cosine_similarity(x)

similarity_score

similarity_score.shape

"""# **Get movie Name as Input from User and Validate for closest Spelling**"""

Favourite_Movie_Name=input('Enter your favourite movie name:')

All_Movies_title_List=df['Movie_Title'].tolist()

import difflib

Movie_Recommendation= difflib.get_close_matches(Favourite_Movie_Name,All_Movies_title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie=df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

#getting a list of similar movies
Recommendation_score=list(enumerate(similarity_score[Index_of_Close_Match_Movie]))
print(Recommendation_score)

len(Recommendation_score)

"""# **Get All Movie Sort Based On Recommendation Score wrt Favourite Movie**"""

#sorting the movies based on their similarity score
Sorted_Similar_Movies=sorted(Recommendation_score, key=lambda x:x[1], reverse =True)
print(Sorted_Similar_Movies)

# print the similar movies based on their index
print('Top 30 movies suggested for you: \n')

i=1

for movie in Sorted_Similar_Movies:
  index=movie[0]
  title_from_index=df[df.index==index]['Movie_Title'].values[0]
  if(i<31):
    print(i, '.',title_from_index)
    i+=1

"""# **Top 10 Movie Recommendation System**"""

Movie_Name=input('Enter your favourite movie name:')
list_of_all_titles=df['Movie_Title'].tolist()
Find_Close_Match= difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match=Find_Close_Match[0]
index_of_Movie =df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
Recommendation_score=list(enumerate(similarity_score[index_of_Movie]))
Sorted_Similar_Movies=sorted(Recommendation_score, key=lambda x:x[1], reverse =True)

print('Top 10 Movies suggested for you:\n')
i=1
for movie in Sorted_Similar_Movies:
  index=movie[0]
  title_from_index=df[df.index==index]['Movie_Title'].values
  if(i<11):
    print(i,'.',title_from_index)
    i+=1